# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'

puts ""
puts "│▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒│"
puts " 基于 Vagrant 的 Kubernetes 练习"
puts "----------------------------------------------------------------------------------"
puts " 作者：倪波 <nibocn@gmail.com>"
puts "│▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒│"
puts ""
puts ""

# -------------------------------------------------
# Variables
# -------------------------------------------------
params = YAML.load_file 'config/vagrant.yml'

var_group_name = params['shared']['group_name']

var_docker_ce_repo_url = params['env']['docker_ce_repo_url']
var_docker_version = params['env']['docker_version']
var_docker_mirror_url = params['env']['docker_mirror_url']

var_k8s_version = params['k8s']['version']
var_k8s_apiserver_name = params['k8s']['apiserver_name']
var_k8s_pod_subnet = params['k8s']['pod_subnet']

var_vm1_name = params['node1']['vm_name']
var_vm1_mem_size = params['node1']['mem_size']
var_vm1_cpus = params['node1']['cpus']
var_vm1_private_ip = params['node1']['private_ip']

var_vm2_name = params['node2']['vm_name']
var_vm2_mem_size = params['node2']['mem_size']
var_vm2_cpus = params['node2']['cpus']
var_vm2_private_ip = params['node2']['private_ip']

var_vm3_name = params['node3']['vm_name']
var_vm3_mem_size = params['node3']['mem_size']
var_vm3_cpus = params['node3']['cpus']
var_vm3_private_ip = params['node3']['private_ip']

# Get host time zone for setting VM time zone
offset_sec = Time.now.gmt_offset
if (offset_sec % (60 * 60)) == 0
  offset_hr = ((offset_sec / 60) / 60)
  timezone_suffix = offset_hr >= 0 ? "-#{offset_hr.to_s}" : "+#{(-offset_hr).to_s}"
  var_system_timezone = 'Etc/GMT' + timezone_suffix
else
  # if host time zone isn't an integer hour offset, fall back to UTC
  var_system_timezone = 'UTC'
end

Vagrant.configure("2") do |config|
  config.vm.box = "ustc/centos/7"

  config.vm.define :node1 do |node1|
    node1.vm.hostname = var_vm1_name
    node1.vm.network :private_network, ip: var_vm1_private_ip
    node1.vm.provider :virtualbox do |vb|
      vb.name = var_vm1_name
      vb.memory = var_vm1_mem_size
      vb.cpus = var_vm1_cpus
      # 指定虚拟机分组
      vb.customize ["modifyvm", :id, "--groups", var_group_name] unless var_group_name.nil?
    end
  end

  config.vm.define :node2 do |node2|
    node2.vm.hostname = var_vm2_name
    node2.vm.network :private_network, ip: var_vm2_private_ip
    node2.vm.provider :virtualbox do |vb|
      vb.name = var_vm2_name
      vb.memory = var_vm2_mem_size
      vb.cpus = var_vm2_cpus
      # 指定虚拟机分组
      vb.customize ["modifyvm", :id, "--groups", var_group_name] unless var_group_name.nil?
    end
  end

  config.vm.define :node3 do |node3|
    node3.vm.hostname = var_vm3_name
    node3.vm.network :private_network, ip: var_vm3_private_ip
    node3.vm.provider :virtualbox do |vb|
      vb.name = var_vm3_name
      vb.memory = var_vm3_mem_size
      vb.cpus = var_vm3_cpus
      # 指定虚拟机分组
      vb.customize ["modifyvm", :id, "--groups", var_group_name] unless var_group_name.nil?
    end
  end

  config.vm.provision "shell", path:"scripts/setup.sh", env: {
    "DOCKER_CE_REPO_URL" => var_docker_ce_repo_url,
    "DOCKER_VERSION" => var_docker_version,
    "DOCKER_MIRROR_URL" => var_docker_mirror_url,
    "K8S_VERSION" => var_k8s_version,
    "K8S_APISERVER_NAME" => var_k8s_apiserver_name,
    "K8S_POD_SUBNET" => var_k8s_pod_subnet,
    "SYSTEM_TIMEZONE" => var_system_timezone,
    "NODE1_HOSTNAME" => var_vm1_name,
    "NODE2_HOSTNAME" => var_vm2_name,
    "NODE3_HOSTNAME" => var_vm3_name,
    "NODE1_IP" => var_vm1_private_ip,
    "NODE2_IP" => var_vm2_private_ip,
    "NODE3_IP" => var_vm3_private_ip,
  }

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
